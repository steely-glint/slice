/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipseorama.slice.stun;

import com.ipseorama.slice.stun.StunPacketException.MessageIntegrityException;
import com.phono.srtplight.Log;
import java.net.InetSocketAddress;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author thp
 */
public class StunPacketTest {

    public StunPacketTest() {
    }

    @BeforeClass
    public static void setUpClass() {
        Log.setLevel(Log.ALL);

    }

    @AfterClass
    public static void tearDownClass() {
    }

    Map<String, String> passwords
            = Collections.unmodifiableMap(Stream.of(
                    new SimpleEntry<>("o3rvX/IW811zoMmQ", "N3Wk6Gk45aUN3w9z3zql1ZqI"),
                    new SimpleEntry<>("6hg", "4vc3fb0dshp2lhs6ekne716q0v"),
                    new SimpleEntry<>("86u301ajf8mdpd", "1ir94ur2424gp08ta9eud4vtj1"),
                    new SimpleEntry<>("LCIKuKTYRRaEp9hM", "ZuGwoWLM3IzMKlC6O6TJI9cg"),
                    new SimpleEntry<>("pet", "snoopy"),
                    new SimpleEntry<>("owner", "charliebrown"),
                    new SimpleEntry<>("device", "bone"),
                    new SimpleEntry<>("smartphone", "nexus5x"),
                    new SimpleEntry<>("a88ag", "incorrect")
            ).collect(Collectors.toMap((e) -> e.getKey(), (e) -> e.getValue())));

    byte[] emptyBindingRequest = {
        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x2f, (byte) 0x67, (byte) 0x63, (byte) 0x76, (byte) 0x6b, (byte) 0x59, (byte) 0x64, (byte) 0x6a,
        (byte) 0x38, (byte) 0x41, (byte) 0x6d, (byte) 0x70};
    byte[] pureStunResponse = {
        (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x50, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x2f, (byte) 0x67, (byte) 0x63, (byte) 0x76, (byte) 0x6b, (byte) 0x59, (byte) 0x64, (byte) 0x6a,
        (byte) 0x38, (byte) 0x41, (byte) 0x6d, (byte) 0x70, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xd3, (byte) 0xed, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x63,
        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xf2, (byte) 0xff, (byte) 0xc0, (byte) 0x43, (byte) 0x04, (byte) 0x21, (byte) 0x80, (byte) 0x2b, (byte) 0x00, (byte) 0x08,
        (byte) 0x00, (byte) 0x01, (byte) 0x0d, (byte) 0x96, (byte) 0x92, (byte) 0x94, (byte) 0x79, (byte) 0xaf, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x43, (byte) 0x69, (byte) 0x74, (byte) 0x72,
        (byte) 0x69, (byte) 0x78, (byte) 0x2d, (byte) 0x33, (byte) 0x2e, (byte) 0x32, (byte) 0x2e, (byte) 0x35, (byte) 0x2e, (byte) 0x35, (byte) 0x20, (byte) 0x27, (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x73,
        (byte) 0x68, (byte) 0x61, (byte) 0x6c, (byte) 0x20, (byte) 0x57, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x27, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04,
        (byte) 0xac, (byte) 0xf8, (byte) 0x7e, (byte) 0x01};

    byte[] turnRequest = {
        (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x08, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x67, (byte) 0x4f, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x43, (byte) 0x64, (byte) 0x73,
        (byte) 0x75, (byte) 0x30, (byte) 0x32, (byte) 0x6f, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x04, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x00};
    byte[] turnResponseChallenge = {
        (byte) 0x01, (byte) 0x13, (byte) 0x00, (byte) 0x64, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x67, (byte) 0x4f, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x43, (byte) 0x64, (byte) 0x73,
        (byte) 0x75, (byte) 0x30, (byte) 0x32, (byte) 0x6f, (byte) 0x00, (byte) 0x09, (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x01, (byte) 0x55, (byte) 0x6e, (byte) 0x61, (byte) 0x75,
        (byte) 0x74, (byte) 0x68, (byte) 0x6f, (byte) 0x72, (byte) 0x69, (byte) 0x73, (byte) 0x65, (byte) 0x64, (byte) 0x00, (byte) 0x15, (byte) 0x00, (byte) 0x10, (byte) 0x64, (byte) 0x66, (byte) 0x36, (byte) 0x62,
        (byte) 0x61, (byte) 0x39, (byte) 0x61, (byte) 0x38, (byte) 0x33, (byte) 0x63, (byte) 0x39, (byte) 0x37, (byte) 0x37, (byte) 0x63, (byte) 0x39, (byte) 0x61, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x09,
        (byte) 0x73, (byte) 0x6f, (byte) 0x6d, (byte) 0x65, (byte) 0x74, (byte) 0x68, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x35, (byte) 0x20, (byte) 0x27, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x1d,
        (byte) 0x43, (byte) 0x69, (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x78, (byte) 0x2d, (byte) 0x33, (byte) 0x2e, (byte) 0x32, (byte) 0x2e, (byte) 0x35, (byte) 0x2e, (byte) 0x35, (byte) 0x20, (byte) 0x27,
        (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x6c, (byte) 0x20, (byte) 0x57, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x27, (byte) 0x19, (byte) 0xe3, (byte) 0x65,
        (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x5a, (byte) 0xef, (byte) 0x2e, (byte) 0x7f};
    byte[] turnReqRedux = {
        (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x54, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x47, (byte) 0x34, (byte) 0x46, (byte) 0x66, (byte) 0x6b, (byte) 0x6a, (byte) 0x56, (byte) 0x50,
        (byte) 0x75, (byte) 0x68, (byte) 0x5a, (byte) 0x75, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x04, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x0a,
        (byte) 0x73, (byte) 0x6d, (byte) 0x61, (byte) 0x72, (byte) 0x74, (byte) 0x70, (byte) 0x68, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x09,
        (byte) 0x73, (byte) 0x6f, (byte) 0x6d, (byte) 0x65, (byte) 0x74, (byte) 0x68, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x15, (byte) 0x00, (byte) 0x10,
        (byte) 0x64, (byte) 0x66, (byte) 0x36, (byte) 0x62, (byte) 0x61, (byte) 0x39, (byte) 0x61, (byte) 0x38, (byte) 0x33, (byte) 0x63, (byte) 0x39, (byte) 0x37, (byte) 0x37, (byte) 0x63, (byte) 0x39, (byte) 0x61,
        (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0xaa, (byte) 0xd6, (byte) 0xba, (byte) 0x47, (byte) 0xd0, (byte) 0x8d, (byte) 0x29, (byte) 0x5a, (byte) 0xac, (byte) 0x28, (byte) 0x5e, (byte) 0xe6,
        (byte) 0xbd, (byte) 0xd1, (byte) 0xf9, (byte) 0x67, (byte) 0xaf, (byte) 0xa5, (byte) 0xc9, (byte) 0xc1};
    byte[] turnAllocOk = {
        (byte) 0x01, (byte) 0x03, (byte) 0x00, (byte) 0x64, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x47, (byte) 0x34, (byte) 0x46, (byte) 0x66, (byte) 0x6b, (byte) 0x6a, (byte) 0x56, (byte) 0x50,
        (byte) 0x75, (byte) 0x68, (byte) 0x5a, (byte) 0x75, (byte) 0x00, (byte) 0x16, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xf1, (byte) 0xc8, (byte) 0xb3, (byte) 0x86, (byte) 0xdd, (byte) 0xed,
        (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xd3, (byte) 0xed, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x63, (byte) 0x00, (byte) 0x0d, (byte) 0x00, (byte) 0x04,
        (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x58, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x43, (byte) 0x69, (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x78, (byte) 0x2d, (byte) 0x33,
        (byte) 0x2e, (byte) 0x32, (byte) 0x2e, (byte) 0x35, (byte) 0x2e, (byte) 0x35, (byte) 0x20, (byte) 0x27, (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x6c, (byte) 0x20,
        (byte) 0x57, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x27, (byte) 0x78, (byte) 0x2d, (byte) 0x33, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x54, (byte) 0xb6, (byte) 0x75, (byte) 0x77,
        (byte) 0xcf, (byte) 0x1f, (byte) 0x79, (byte) 0x7f, (byte) 0x37, (byte) 0xf7, (byte) 0xeb, (byte) 0x4f, (byte) 0x82, (byte) 0x65, (byte) 0x98, (byte) 0x75, (byte) 0x5e, (byte) 0x13, (byte) 0x42, (byte) 0xf7,
        (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x5c, (byte) 0xa4, (byte) 0x50, (byte) 0x49};
    byte[] turnReqPerm = {
        (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x58, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x54, (byte) 0x62, (byte) 0x39, (byte) 0x2b, (byte) 0x34, (byte) 0x6b, (byte) 0x52, (byte) 0x44,
        (byte) 0x64, (byte) 0x53, (byte) 0x4b, (byte) 0x2b, (byte) 0x00, (byte) 0x12, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0x36, (byte) 0x82, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x50,
        (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x0a, (byte) 0x73, (byte) 0x6d, (byte) 0x61, (byte) 0x72, (byte) 0x74, (byte) 0x70, (byte) 0x68, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x00, (byte) 0x00,
        (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x09, (byte) 0x73, (byte) 0x6f, (byte) 0x6d, (byte) 0x65, (byte) 0x74, (byte) 0x68, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x00, (byte) 0x00, (byte) 0x00,
        (byte) 0x00, (byte) 0x15, (byte) 0x00, (byte) 0x10, (byte) 0x64, (byte) 0x66, (byte) 0x36, (byte) 0x62, (byte) 0x61, (byte) 0x39, (byte) 0x61, (byte) 0x38, (byte) 0x33, (byte) 0x63, (byte) 0x39, (byte) 0x37,
        (byte) 0x37, (byte) 0x63, (byte) 0x39, (byte) 0x61, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x65, (byte) 0x28, (byte) 0x1a, (byte) 0x3d, (byte) 0xb9, (byte) 0xa8, (byte) 0xa4,
        (byte) 0xd7, (byte) 0x06, (byte) 0x7a, (byte) 0xfb, (byte) 0x15, (byte) 0x0c, (byte) 0x7a, (byte) 0xa1, (byte) 0xbc, (byte) 0x6b, (byte) 0x3b, (byte) 0x9e};
    byte[] turnReqOk = {
        (byte) 0x01, (byte) 0x08, (byte) 0x00, (byte) 0x44, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x54, (byte) 0x62, (byte) 0x39, (byte) 0x2b, (byte) 0x34, (byte) 0x6b, (byte) 0x52, (byte) 0x44,
        (byte) 0x64, (byte) 0x53, (byte) 0x4b, (byte) 0x2b, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x43, (byte) 0x69, (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x78, (byte) 0x2d, (byte) 0x33,
        (byte) 0x2e, (byte) 0x32, (byte) 0x2e, (byte) 0x35, (byte) 0x2e, (byte) 0x35, (byte) 0x20, (byte) 0x27, (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x6c, (byte) 0x20,
        (byte) 0x57, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x27, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x91, (byte) 0xc5, (byte) 0xaf, (byte) 0xa1,
        (byte) 0x18, (byte) 0x6f, (byte) 0x1f, (byte) 0x92, (byte) 0xa3, (byte) 0xdb, (byte) 0x67, (byte) 0x46, (byte) 0x0c, (byte) 0x5c, (byte) 0x85, (byte) 0x6e, (byte) 0x0c, (byte) 0x02, (byte) 0x6b, (byte) 0xc2,
        (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x3b, (byte) 0xd0, (byte) 0xa9, (byte) 0xad};
    byte[] iceProbe = {
        (byte) 0x01, (byte) 0x08, (byte) 0x00, (byte) 0x44, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x54, (byte) 0x62, (byte) 0x39, (byte) 0x2b, (byte) 0x34, (byte) 0x6b, (byte) 0x52, (byte) 0x44,
        (byte) 0x64, (byte) 0x53, (byte) 0x4b, (byte) 0x2b, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x43, (byte) 0x69, (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x78, (byte) 0x2d, (byte) 0x33,
        (byte) 0x2e, (byte) 0x32, (byte) 0x2e, (byte) 0x35, (byte) 0x2e, (byte) 0x35, (byte) 0x20, (byte) 0x27, (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x68, (byte) 0x61, (byte) 0x6c, (byte) 0x20,
        (byte) 0x57, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x27, (byte) 0x22, (byte) 0x00, (byte) 0x1d, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x91, (byte) 0xc5, (byte) 0xaf, (byte) 0xa1,
        (byte) 0x18, (byte) 0x6f, (byte) 0x1f, (byte) 0x92, (byte) 0xa3, (byte) 0xdb, (byte) 0x67, (byte) 0x46, (byte) 0x0c, (byte) 0x5c, (byte) 0x85, (byte) 0x6e, (byte) 0x0c, (byte) 0x02, (byte) 0x6b, (byte) 0xc2,
        (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x3b, (byte) 0xd0, (byte) 0xa9, (byte) 0xad};
    byte[] iceProbe2 = {
        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x5c, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x56, (byte) 0x53, (byte) 0x73, (byte) 0x5a, (byte) 0x49, (byte) 0x78, (byte) 0x5a, (byte) 0x6d,
        (byte) 0x7a, (byte) 0x68, (byte) 0x72, (byte) 0x48, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x1f, (byte) 0x38, (byte) 0x36, (byte) 0x75, (byte) 0x33, (byte) 0x30, (byte) 0x31, (byte) 0x61, (byte) 0x6a,
        (byte) 0x66, (byte) 0x38, (byte) 0x6d, (byte) 0x64, (byte) 0x70, (byte) 0x64, (byte) 0x3a, (byte) 0x4c, (byte) 0x43, (byte) 0x49, (byte) 0x4b, (byte) 0x75, (byte) 0x4b, (byte) 0x54, (byte) 0x59, (byte) 0x52,
        (byte) 0x52, (byte) 0x61, (byte) 0x45, (byte) 0x70, (byte) 0x39, (byte) 0x68, (byte) 0x4d, (byte) 0x00, (byte) 0x80, (byte) 0x2a, (byte) 0x00, (byte) 0x08, (byte) 0xbc, (byte) 0xb9, (byte) 0x24, (byte) 0x63,
        (byte) 0x91, (byte) 0x12, (byte) 0x29, (byte) 0x38, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x24, (byte) 0x00, (byte) 0x04, (byte) 0x6e, (byte) 0x7e, (byte) 0x1e, (byte) 0xff,
        (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x5b, (byte) 0x32, (byte) 0x43, (byte) 0x65, (byte) 0xbe, (byte) 0xe1, (byte) 0x66, (byte) 0xfc, (byte) 0x14, (byte) 0xca, (byte) 0x29, (byte) 0xfd,
        (byte) 0x50, (byte) 0x5f, (byte) 0x65, (byte) 0x0e, (byte) 0x8e, (byte) 0x0d, (byte) 0xc8, (byte) 0x0f, (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0x72, (byte) 0xc8, (byte) 0x0b, (byte) 0x11};
    byte[] iceBindOk = {
        (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x60, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x38, (byte) 0x73, (byte) 0x6c, (byte) 0x45, (byte) 0x72, (byte) 0x74, (byte) 0x65, (byte) 0x4f,
        (byte) 0x53, (byte) 0x61, (byte) 0x4b, (byte) 0x64, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xd3, (byte) 0xed, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x63,
        (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x1f, (byte) 0x38, (byte) 0x36, (byte) 0x75, (byte) 0x33, (byte) 0x30, (byte) 0x31, (byte) 0x61, (byte) 0x6a, (byte) 0x66, (byte) 0x38, (byte) 0x6d, (byte) 0x64,
        (byte) 0x70, (byte) 0x64, (byte) 0x3a, (byte) 0x4c, (byte) 0x43, (byte) 0x49, (byte) 0x4b, (byte) 0x75, (byte) 0x4b, (byte) 0x54, (byte) 0x59, (byte) 0x52, (byte) 0x52, (byte) 0x61, (byte) 0x45, (byte) 0x70,
        (byte) 0x39, (byte) 0x68, (byte) 0x4d, (byte) 0x00, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x09, (byte) 0x69, (byte) 0x63, (byte) 0x65, (byte) 0x34, (byte) 0x6a, (byte) 0x2e, (byte) 0x6f, (byte) 0x72,
        (byte) 0x67, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0x74, (byte) 0x38, (byte) 0x17, (byte) 0x0d, (byte) 0xcf, (byte) 0x0a, (byte) 0x3c, (byte) 0x66,
        (byte) 0x19, (byte) 0x05, (byte) 0x8d, (byte) 0xd9, (byte) 0x8f, (byte) 0x60, (byte) 0x0e, (byte) 0x29, (byte) 0x2f, (byte) 0xa6, (byte) 0xa7, (byte) 0x6b, (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04,
        (byte) 0xf1, (byte) 0x5f, (byte) 0xbf, (byte) 0x21};
    byte[] iceBindOk2 = {
        (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x2c, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x52, (byte) 0x39, (byte) 0x8b, (byte) 0xde, (byte) 0x54, (byte) 0x01, (byte) 0x21, (byte) 0xe1,
        (byte) 0x2b, (byte) 0x0c, (byte) 0x68, (byte) 0x32, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0x36, (byte) 0x82, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x50,
        (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, (byte) 0xcc, (byte) 0x73, (byte) 0xf6, (byte) 0x2c, (byte) 0xa2, (byte) 0x96, (byte) 0xd4, (byte) 0xe1, (byte) 0x66, (byte) 0x41, (byte) 0x3f, (byte) 0xb4,
        (byte) 0x44, (byte) 0x6c, (byte) 0xb1, (byte) 0xa3, (byte) 0x61, (byte) 0xcc, (byte) 0x14, (byte) 0x5c, (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0xa7, (byte) 0x0b, (byte) 0x78, (byte) 0x54};

    byte[] stunBindingRequest = {
        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x50, (byte) 0x21, (byte) 0x12, /* r_...P!. */
        (byte) 0xa4, (byte) 0x42, (byte) 0x58, (byte) 0x6e, (byte) 0x61, (byte) 0x31, (byte) 0x45, (byte) 0x4c, /* .BXna1EL */
        (byte) 0x71, (byte) 0x56, (byte) 0x42, (byte) 0x79, (byte) 0x31, (byte) 0x54, (byte) 0x00, (byte) 0x06, /* qVBy1T.. */
        (byte) 0x00, (byte) 0x14, (byte) 0x36, (byte) 0x68, (byte) 0x67, (byte) 0x3a, (byte) 0x6f, (byte) 0x33, /* ..6hg:o3 */
        (byte) 0x72, (byte) 0x76, (byte) 0x58, (byte) 0x2f, (byte) 0x49, (byte) 0x57, (byte) 0x38, (byte) 0x31, /* rvX/IW81 */
        (byte) 0x31, (byte) 0x7a, (byte) 0x6f, (byte) 0x4d, (byte) 0x6d, (byte) 0x51, (byte) 0x80, (byte) 0x2a, /* 1zoMmQ.* */
        (byte) 0x00, (byte) 0x08, (byte) 0x06, (byte) 0xbf, (byte) 0x17, (byte) 0x2d, (byte) 0xfb, (byte) 0x67, /* .....-.g */
        (byte) 0xaf, (byte) 0xb7, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x24, /* ...%...$ */
        (byte) 0x00, (byte) 0x04, (byte) 0x6e, (byte) 0x00, (byte) 0x1e, (byte) 0xff, (byte) 0x00, (byte) 0x08, /* ..n..... */
        (byte) 0x00, (byte) 0x14, (byte) 0x63, (byte) 0x25, (byte) 0x16, (byte) 0x87, (byte) 0xe6, (byte) 0x59, /* ..c%...Y */
        (byte) 0x81, (byte) 0xad, (byte) 0x3a, (byte) 0x16, (byte) 0x7e, (byte) 0xe4, (byte) 0xe7, (byte) 0xf2, /* ..:.~... */
        (byte) 0xb9, (byte) 0x25, (byte) 0xa1, (byte) 0x67, (byte) 0xec, (byte) 0xc1, (byte) 0x80, (byte) 0x28, /* .%.g...( */
        (byte) 0x00, (byte) 0x04, (byte) 0x70, (byte) 0xb9, (byte) 0xc6, (byte) 0x36 /* ..p..6 */};

    byte[] stunBindingResponse = {
        (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x58, (byte) 0x21, (byte) 0x12, (byte) 0xa4, (byte) 0x42, (byte) 0x45, (byte) 0x7a, (byte) 0x47, (byte) 0x2f, (byte) 0x7a, (byte) 0x62, (byte) 0x6f, (byte) 0x56, // ...X!..BEzG/zboV
        (byte) 0x2f, (byte) 0x63, (byte) 0x4e, (byte) 0x30, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01, (byte) 0xa3, (byte) 0x91, (byte) 0xe1, (byte) 0x51, (byte) 0xa0, (byte) 0x61, // /cN0. .......Q.a
        (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x16, (byte) 0x61, (byte) 0x38, (byte) 0x38, (byte) 0x61, (byte) 0x67, (byte) 0x3a, (byte) 0x47, (byte) 0x68, (byte) 0x5a, (byte) 0x6f, (byte) 0x4e, (byte) 0x70, // ....a88ag:GhZoNp
        (byte) 0x66, (byte) 0x67, (byte) 0x4b, (byte) 0x37, (byte) 0x45, (byte) 0x47, (byte) 0x58, (byte) 0x56, (byte) 0x36, (byte) 0x73, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x22, (byte) 0x00, (byte) 0x09, //fgK7EGXV6s..."..
        (byte) 0x69, (byte) 0x63, (byte) 0x65, (byte) 0x34, (byte) 0x6a, (byte) 0x2e, (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x14, // ic e4j.org.......
        (byte) 0xed, (byte) 0x80, (byte) 0xce, (byte) 0xae, (byte) 0x51, (byte) 0x77, (byte) 0x2d, (byte) 0x75, (byte) 0x28, (byte) 0x94, (byte) 0xaa, (byte) 0xb8, (byte) 0xb7, (byte) 0xa9, (byte) 0xce, (byte) 0xd2, // ....Qw-u(.......
        (byte) 0xfb, (byte) 0x87, (byte) 0x12, (byte) 0x0b, (byte) 0x80, (byte) 0x28, (byte) 0x00, (byte) 0x04, (byte) 0xe2, (byte) 0x2e, (byte) 0xbe, (byte) 0x5a // .....(.....Z
    };
    
    InetSocketAddress near = new InetSocketAddress("4.4.4.4", (char) 3323);

    @Before
    public void setUp() {

    }

    @After
    public void tearDown() {
    }

    @Test
    public void emptyBinding() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(emptyBindingRequest, null,near);
        assert (s instanceof StunBindingRequest);
    }

    @Test
    public void stunResponse() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(pureStunResponse, null,near);
        assert (s instanceof StunBindingResponse);
    }

    @Test
    public void testTurnReq() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnRequest, null,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testTurnChallenge() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnResponseChallenge, null,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testTurnReqRedux() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnReqRedux, passwords,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testTurnReqOk() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnReqOk, null,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testTurnPerm() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnReqPerm, passwords,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testTurnAllocOk() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(this.turnAllocOk, null,near);
        assert (s instanceof StunPacket);
    }

    @Test
    public void testPacket() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(stunBindingRequest, passwords,near);
        assert (s instanceof StunBindingRequest);
    }

    @Test
    public void testMI() {
        Exception rez = new java.lang.Exception();

        try {
            StunPacket s = StunPacket.mkStunPacket(stunBindingResponse, passwords,near);
        } catch (Exception x) {
            rez = x;
        }
        assert (rez instanceof MessageIntegrityException);
    }

    @Test
    public void testOutbound() throws Exception {
        StunPacket s = StunPacket.mkStunPacket(stunBindingRequest, passwords,near);
        assert (s instanceof StunBindingRequest);
        byte[] pass = s.getPass();
        byte[] outb = s.outboundBytes(pass);
        assertArrayEquals("Message bytes should match ", stunBindingRequest, outb);
    }

    @Test
    public void testBareRequestBuild() throws Exception {
        Random r = new Random();
        byte[] tid = new byte[12];
        r.nextBytes(tid);
        StunPacket s = new StunBindingRequest();
        s.setTid(tid);
        byte[] outb = s.outboundBytes((byte[])null);
        StunPacket rep = StunPacket.mkStunPacket(outb, null,near);
        assert (rep instanceof StunBindingRequest);
    }

    @Test
    public void testAuthedRequestBuild() throws Exception {
        Random r = new Random();
        byte[] tid = new byte[12];
        r.nextBytes(tid);
        StunPacket s = new StunBindingRequest();
        s.setTid(tid);
        Map.Entry<String, String> up = passwords.entrySet().iterator().next();
        String username = up.getKey();
        String pass = up.getValue();
        Log.debug("username=" + username);
        ArrayList<StunAttribute> attrs = new ArrayList();

        StunAttribute a = new StunAttribute("USERNAME");
        a.setString(username);
        attrs.add(a);

        a = new StunAttribute("ICE-CONTROLLING");
        byte[] tb = new byte[8];
        r.nextBytes(tb);
        a.setBytes(tb);
        attrs.add(a);

        a = new StunAttribute("USE-CANDIDATE");
        attrs.add(a);

        a = new StunAttribute("PRIORITY");
        int pri = r.nextInt(Character.MAX_VALUE);
        a.setInt(pri);
        attrs.add(a);

        a = new StunAttribute("MESSAGE-INTEGRITY");
        byte[] mi = new byte[20];
        a.setBytes(mi);
        attrs.add(a);

        a = new StunAttribute("FINGERPRINT");
        a.setInt(0);
        attrs.add(a);

        s.setAttributes(attrs);

        byte[] outb = s.outboundBytes(pass.getBytes());
        StunPacket rep = StunPacket.mkStunPacket(outb, passwords,near);
        assert (rep instanceof StunBindingRequest);
    }

}
